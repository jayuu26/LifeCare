package com.thunder.lifecare.GreenDao.daomodel;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_CATEGORY".
*/
public class HomeCategoryDao extends AbstractDao<HomeCategory, Long> {

    public static final String TABLENAME = "HOME_CATEGORY";

    /**
     * Properties of entity HomeCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IconUrl = new Property(2, String.class, "iconUrl", false, "ICON_URL");
        public final static Property ItemUrl = new Property(3, String.class, "itemUrl", false, "ITEM_URL");
        public final static Property Home_sub_id = new Property(4, long.class, "home_sub_id", false, "HOME_SUB_ID");
    }

    private Query<HomeCategory> homeRootObject_HomeCategoryQuery;

    public HomeCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public HomeCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ICON_URL\" TEXT," + // 2: iconUrl
                "\"ITEM_URL\" TEXT," + // 3: itemUrl
                "\"HOME_SUB_ID\" INTEGER NOT NULL );"); // 4: home_sub_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String itemUrl = entity.getItemUrl();
        if (itemUrl != null) {
            stmt.bindString(4, itemUrl);
        }
        stmt.bindLong(5, entity.getHome_sub_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String itemUrl = entity.getItemUrl();
        if (itemUrl != null) {
            stmt.bindString(4, itemUrl);
        }
        stmt.bindLong(5, entity.getHome_sub_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeCategory readEntity(Cursor cursor, int offset) {
        HomeCategory entity = new HomeCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iconUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemUrl
            cursor.getLong(offset + 4) // home_sub_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeCategory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHome_sub_id(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeCategory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeCategory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeCategory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "homeCategory" to-many relationship of HomeRootObject. */
    public List<HomeCategory> _queryHomeRootObject_HomeCategory(long home_sub_id) {
        synchronized (this) {
            if (homeRootObject_HomeCategoryQuery == null) {
                QueryBuilder<HomeCategory> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Home_sub_id.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                homeRootObject_HomeCategoryQuery = queryBuilder.build();
            }
        }
        Query<HomeCategory> query = homeRootObject_HomeCategoryQuery.forCurrentThread();
        query.setParameter(0, home_sub_id);
        return query.list();
    }

}
