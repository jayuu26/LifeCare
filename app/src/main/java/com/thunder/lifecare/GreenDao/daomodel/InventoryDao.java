package com.thunder.lifecare.GreenDao.daomodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY".
*/
public class InventoryDao extends AbstractDao<Inventory, Long> {

    public static final String TABLENAME = "INVENTORY";

    /**
     * Properties of entity Inventory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, Long.class, "userid", true, "_id");
        public final static Property City = new Property(1, String.class, "city", false, "CITY");
        public final static Property Country = new Property(2, String.class, "country", false, "COUNTRY");
        public final static Property Activationkey = new Property(3, String.class, "activationkey", false, "ACTIVATIONKEY");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Enabled = new Property(5, Boolean.class, "enabled", false, "ENABLED");
        public final static Property Firstname = new Property(6, String.class, "firstname", false, "FIRSTNAME");
        public final static Property Lastname = new Property(7, String.class, "lastname", false, "LASTNAME");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property State = new Property(9, String.class, "state", false, "STATE");
        public final static Property Telephone = new Property(10, String.class, "telephone", false, "TELEPHONE");
        public final static Property Username = new Property(11, String.class, "username", false, "USERNAME");
        public final static Property Zip = new Property(12, Long.class, "zip", false, "ZIP");
        public final static Property MerchantPin = new Property(13, String.class, "merchantPin", false, "MERCHANT_PIN");
    }


    public InventoryDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: userid
                "\"CITY\" TEXT," + // 1: city
                "\"COUNTRY\" TEXT," + // 2: country
                "\"ACTIVATIONKEY\" TEXT," + // 3: activationkey
                "\"EMAIL\" TEXT," + // 4: email
                "\"ENABLED\" INTEGER," + // 5: enabled
                "\"FIRSTNAME\" TEXT," + // 6: firstname
                "\"LASTNAME\" TEXT," + // 7: lastname
                "\"PASSWORD\" TEXT," + // 8: password
                "\"STATE\" TEXT," + // 9: state
                "\"TELEPHONE\" TEXT," + // 10: telephone
                "\"USERNAME\" TEXT," + // 11: username
                "\"ZIP\" INTEGER," + // 12: zip
                "\"MERCHANT_PIN\" TEXT);"); // 13: merchantPin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inventory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserid());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String activationkey = entity.getActivationkey();
        if (activationkey != null) {
            stmt.bindString(4, activationkey);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        Boolean enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindLong(6, enabled ? 1L: 0L);
        }
 
        String firstname = entity.getFirstname();
        if (firstname != null) {
            stmt.bindString(7, firstname);
        }
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(8, lastname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(11, telephone);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(12, username);
        }
 
        Long zip = entity.getZip();
        if (zip != null) {
            stmt.bindLong(13, zip);
        }
 
        String merchantPin = entity.getMerchantPin();
        if (merchantPin != null) {
            stmt.bindString(14, merchantPin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inventory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserid());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String activationkey = entity.getActivationkey();
        if (activationkey != null) {
            stmt.bindString(4, activationkey);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        Boolean enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindLong(6, enabled ? 1L: 0L);
        }
 
        String firstname = entity.getFirstname();
        if (firstname != null) {
            stmt.bindString(7, firstname);
        }
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(8, lastname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(11, telephone);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(12, username);
        }
 
        Long zip = entity.getZip();
        if (zip != null) {
            stmt.bindLong(13, zip);
        }
 
        String merchantPin = entity.getMerchantPin();
        if (merchantPin != null) {
            stmt.bindString(14, merchantPin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Inventory readEntity(Cursor cursor, int offset) {
        Inventory entity = new Inventory( //
            cursor.getLong(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // country
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // activationkey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // enabled
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // firstname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // state
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // telephone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // username
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // zip
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // merchantPin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inventory entity, int offset) {
        entity.setUserid(cursor.getLong(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActivationkey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnabled(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setFirstname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTelephone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUsername(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setZip(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setMerchantPin(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Inventory entity, long rowId) {
        entity.setUserid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Inventory entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inventory entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
